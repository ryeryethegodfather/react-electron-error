import { app, BrowserWindow, ipcMain } from 'electron';
import fs from 'fs';
import path from 'path';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) { // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences:{
      nodeIntegration: true,
      contextIsolation: true,
      worldSafeExecuteJavaScript: true,
      // preload.js or ts????
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
     //preload: path.join(__dirname, "preload.js")
    },
    
  });

  ensureDirSync(path.join(app.getPath('userData'), 'db'));

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle('asynchronous-get-DBs', async (event, arg) => {
  let dbs: string[] | NodeJS.ErrnoException = [];
  dbs = await GetDBs();		
 // const waiting = await SimLoading();
  return dbs;
  //return dbs;
});


export async function  GetDBs() : Promise<string[] | NodeJS.ErrnoException> {
  console.log("GETTING DBS M8! \n");
  return new Promise((resolve, reject) => {
      const dbs : string[] = [];
          fs.readdir(path.join(app.getPath('userData'), 'db'), function (err, files) {
      
          path.join(app.getPath('userData'), 'db');
      //	console.log(files);
          if (err) {
      //		console.log(err);
              reject(err);
          }

          files.forEach(file => {
              dbs.push(file);
          });
      resolve(dbs);
    })
  })
}


function ensureDirSync (dirpath: string) {
	try {
    return fs.mkdirSync(dirpath)
	} catch (err) {
    if (err.code !== 'EEXIST')  {
		throw err
	}}
}